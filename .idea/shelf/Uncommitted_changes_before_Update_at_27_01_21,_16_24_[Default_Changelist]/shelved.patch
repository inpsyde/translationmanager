Index: src/Module/ACF/Processor/OutgoingMetaProcessor.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php # -*- coding: utf-8 -*-\n\nnamespace Translationmanager\\Module\\ACF\\Processor;\n\nuse Translationmanager\\Module\\ACF\\Integrator;\nuse Translationmanager\\Module\\Processor\\OutgoingProcessor;\nuse Translationmanager\\Translation;\n\n/**\n * Class OutgoingMetaProcessor\n *\n * Will generate the outgoing ACF Data\n *\n * @package Translationmanager\\Module\\ACF\\Processor\n */\nclass OutgoingMetaProcessor implements OutgoingProcessor\n{\n\n    /**\n     * ACF flexible field's layout key\n     * It is used to exclude the key from sync keys\n     */\n    const FLEXIBLE_FIELD_LAYOUT_KEY = 'acf_fc_layout';\n\n    const _NAMESPACE = 'ACF';\n\n    /**\n     * ACF field Types\n     */\n    const FIELD_TYPE_GROUP = 'group';\n    const FIELD_TYPE_REPEATER = 'repeater';\n    const FIELD_TYPE_FLEXIBLE = 'flexible_content';\n    const TRANSLATABLE_FIELD_TYPES = ['text', 'textarea', 'wysiwyg', self::FIELD_TYPE_GROUP, self::FIELD_TYPE_REPEATER, self::FIELD_TYPE_FLEXIBLE];\n\n    /**\n     * @inheritDoc\n     */\n    public function processOutgoing(Translation $translation)\n    {\n        if (!$translation->is_valid()) {\n            return;\n        }\n\n        $sourcePostId = $translation->source_post_id();\n\n        $fields = get_field_objects($sourcePostId);\n        $acfFields = $this->addACFFieldKeys($fields, [], $sourcePostId);\n\n        $toNotTranslate = $acfFields['to-not-translate'];\n        unset($acfFields['to-not-translate']);\n        if (!empty($acfFields)) {\n            $translation->set_value(Integrator::ACF_FIELDS, $acfFields, self::_NAMESPACE);\n        }\n        if (!empty($toNotTranslate)) {\n            $translation->set_meta(Integrator::NOT_TRANSLATABE_ACF_FIELDS, $toNotTranslate, self::_NAMESPACE);\n        }\n    }\n\n    /**\n     * Find the appropriate ACF meta keys\n     *\n     * This method will receive the ACF fields and\n     * will find the appropriate meta keys depending on field type\n     *\n     * @param array $fields the array of advanced custom fields\n     * @param array $keys the array of meta keys to translate\n     * @param int $postID The source post id\n     * @return array the array of meta keys to be synced\n     *\n     * phpcs:disable Generic.Metrics.NestingLevel.MaxExceeded\n     * phpcs:disable Generic.Metrics.CyclomaticComplexity.TooHigh\n     */\n    protected function addACFFieldKeys(array $fields, array $keys, $postID)\n    {\n        // phpcs:enable\n        foreach ($fields as $filedKey => $field) {\n            if (!in_array($field['type'], self::TRANSLATABLE_FIELD_TYPES, true)) {\n                continue;\n            }\n            switch ($field['type']) {\n                case self::FIELD_TYPE_GROUP:\n                case self::FIELD_TYPE_REPEATER:\n                case self::FIELD_TYPE_FLEXIBLE:\n                    if (empty($field['value']) || empty($field['name'])) {\n                        break;\n                    }\n                    $foundKeys = $this->recursivelyFindLayoutFieldKeys($field['value'], $field['name'], $postID);\n                    foreach ($foundKeys as $key => $value) {\n                        $fieldType = $this->getFieldTypeByKey($key, $postID);\n                        if ($fieldType === self::FIELD_TYPE_REPEATER && !empty($value)) {\n                            $keys['to-not-translate'][$key] = count($value);\n                            continue;\n                        }\n                        $keys[$key] = $value;\n                    }\n                    if ($field['type'] === self::FIELD_TYPE_FLEXIBLE) {\n                        foreach ($field['value'] as $value) {\n                            if (isset($value['acf_fc_layout'])) {\n                                $layoutArr[] = $value['acf_fc_layout'];\n                            }\n                        }\n                        $keys['to-not-translate'][$filedKey] = $layoutArr;\n                    }\n                    if ($field['type'] === self::FIELD_TYPE_REPEATER) {\n                        $keys['to-not-translate'][$field['name']] = count($field['value']);\n                    }\n                    break;\n                default:\n                    $keys[$filedKey] = $field['value'];\n            }\n        }\n\n        return $keys;\n    }\n\n    /**\n     * Recursively loop over the layout fields\n     *\n     * This Method will recursively loop over the layout fields and will generate the necessary keys\n     *\n     * @param array $array the array of fields\n     * @param string $parentKey The key of the parent field to bind with the current key\n     * @param int $postID The source post id\n     * @return array the array of the generated keys\n     */\n    protected function recursivelyFindLayoutFieldKeys(array $array, $parentKey, $postID)\n    {\n        $keys = [];\n        foreach ($array as $key => $value) {\n            $newKey = $parentKey . '_' . $key;\n\n            if (is_array($array[$key])) {\n                $keys = array_merge($keys, $this->recursivelyFindLayoutFieldKeys($array[$key], $newKey, $postID));\n            }\n\n            $fieldType = $this->getFieldTypeByKey($newKey, $postID);\n\n            if ($key === self::FLEXIBLE_FIELD_LAYOUT_KEY || !in_array($fieldType, self::TRANSLATABLE_FIELD_TYPES, true)) {\n                continue;\n            }\n\n            $keys[$newKey] = $value;\n        }\n        return $keys;\n    }\n\n    /**\n     * Get post's ACF field type by field key\n     *\n     * @param string $key The ACF field Key\n     * @param int $postID the source project post id\n     * @return string Field type of ACF field\n     */\n    protected function getFieldTypeByKey($key, $postID)\n    {\n        if (empty($key) || empty($postID)) {\n            return '';\n        }\n\n        $acfKey = get_post_meta($postID, '_'.$key, true);\n        $acfFieldObject = get_field_object($acfKey);\n\n        return !empty($acfFieldObject) ? $acfFieldObject['type'] : '';\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Module/ACF/Processor/OutgoingMetaProcessor.php	(revision 717400b57cce9bb8a033612a183499216a402fe6)
+++ src/Module/ACF/Processor/OutgoingMetaProcessor.php	(date 1611674260820)
@@ -44,6 +44,11 @@
         $sourcePostId = $translation->source_post_id();
 
         $fields = get_field_objects($sourcePostId);
+
+        if (empty($fields)) {
+            return;
+        }
+
         $acfFields = $this->addACFFieldKeys($fields, [], $sourcePostId);
 
         $toNotTranslate = $acfFields['to-not-translate'];
